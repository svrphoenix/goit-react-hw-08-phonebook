{"version":3,"file":"static/js/50.590c8c98.chunk.js","mappings":"sSAEaA,EAAkBC,EAAAA,EAAAA,IAAH,uF,SCAfC,EAAY,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAC1B,OAAO,SAACH,EAAD,UAAkBG,GAC1B,E,oBCDYC,GAAaH,EAAAA,EAAAA,GAAOI,EAAAA,GAAPJ,CAAH,sJASVK,EAAgBL,EAAAA,EAAAA,IAAH,mFAmBbM,GAbSN,EAAAA,EAAAA,OAAH,uPAaEA,EAAAA,EAAAA,GAAOO,EAAAA,GAAPP,CAAH,iFAMLQ,GAAaR,EAAAA,EAAAA,GAAOS,EAAAA,GAAPT,CAAH,2DAKVU,EAAYV,EAAAA,EAAAA,GAAH,kE,UCrChBW,EAAgBC,EAAAA,KAAaC,MAAM,CACvCC,KAAMF,EAAAA,KAAaG,SAAS,mBAC5BC,OAAQJ,EAAAA,KACLK,QALH,kFAK0B,6BACvBF,SAAS,qBCQDG,EAAiB,WAC5B,IAAMC,GAAWC,EAAAA,EAAAA,MACXC,GAAWC,EAAAA,EAAAA,MAwBjB,OACE,SAAC,KAAD,CACEC,cAAe,CACbT,KAAM,GACNE,OAAQ,IAEVQ,iBAAkBb,EAClBc,SA7BiB,SAACC,EAAQC,GAE1BN,EAASO,MACP,qBAAGd,KAAgBe,gBAAkBH,EAAOZ,KAAKe,aAAjD,IAGFC,EAAAA,GAAAA,MAAA,mBACcJ,EAAOZ,KAAKiB,cAD1B,4BAKEV,EAASO,MAAK,qBAAGZ,SAAwBU,EAAOV,MAAlC,IAChBc,EAAAA,GAAAA,MAAA,8BACyBJ,EAAOV,OADhC,6BAMFG,GAASa,EAAAA,EAAAA,IAAWN,IACpBC,EAAQM,YACT,EAGC,UAQE,UAAC9B,EAAD,YACE,SAACO,EAAD,UAAW,iBACX,UAACL,EAAD,YACE,0BACE,6BAAO,gBAEL,SAACC,EAAD,CAAO4B,KAAK,OAAOpB,KAAK,OAAOC,UAAQ,KACvC,SAACP,EAAD,CAAYM,KAAK,OAAOqB,UAAU,YAGtC,0BACE,6BAAO,gBAEL,SAAC7B,EAAD,CACE4B,KAAK,MACLpB,KAAK,SACLsB,MAAM,+FACNrB,UAAQ,KAEV,SAACP,EAAD,CAAYM,KAAK,SAASqB,UAAU,YAGxC,SAACE,EAAA,EAAD,CAAQC,QAAQ,YAAYJ,KAAK,SAAjC,SAA0C,uBAOnD,E,oBC3EYK,EAAS,WACpB,IAAMpB,GAAWC,EAAAA,EAAAA,MACXoB,GAASC,EAAAA,EAAAA,MAETC,IAAkBC,EAAAA,EAAAA,MAExB,OACE,SAACC,EAAA,EAAD,CACEN,QAAQ,WACRO,MAAM,0BACNX,KAAK,OACLY,KAAK,QACLC,GAAI,CAAEC,GAAI,EAAGC,GAAI,GACjBC,MAAOV,EACPW,SAAUT,EACVU,SAAU,YAAmC,IAAfF,EAAc,EAA/BG,cAAiBH,MAC5B/B,GAASmC,EAAAA,EAAAA,GAAeJ,GACzB,GAGN,ECxBYK,EAAWvD,EAAAA,EAAAA,GAAH,+HAQRwD,EAAUxD,EAAAA,EAAAA,GAAH,gF,8BCJPyD,EAAc,WACzB,IAAMtC,GAAWC,EAAAA,EAAAA,MACXsC,GAAkBf,EAAAA,EAAAA,MAExB,OAAKe,EAYEA,EAAgBC,OAAS,GAC9B,SAAC,IAAD,CAAWC,SAAS,KAApB,UACE,SAACL,EAAD,UACGG,EAAgBG,KAAI,gBAAGC,EAAH,EAAGA,GAAIhD,EAAP,EAAOA,KAAME,EAAb,EAAaA,OAAb,OACnB,SAACwC,EAAD,WACE,UAACO,EAAA,GAAD,CAAMC,WAAS,EAACC,QAAS,EAAzB,WACE,SAACF,EAAA,GAAD,CAAMG,MAAI,EAACC,GAAI,EAAf,UACE,uBAAIrD,OAEN,SAACiD,EAAA,GAAD,CAAMG,MAAI,EAACC,GAAI,EAAf,UACE,uBAAInD,OAEN,SAAC+C,EAAA,GAAD,CAAMG,MAAI,EAACC,GAAI,EAAf,UACE,SAAC9B,EAAA,EAAD,CACEH,KAAK,SACLI,QAAQ,YACR8B,QAAS,kBAAMjD,GAASkD,EAAAA,EAAAA,IAAcP,GAA7B,EAHX,SAIC,cAIH,SAACC,EAAA,GAAD,CAAMG,MAAI,EAACC,GAAI,EAAf,UACE,SAAC9B,EAAA,EAAD,CACEH,KAAK,SACLI,QAAQ,YACR8B,QAAS,kBAAME,QAAQC,IAAI,OAAlB,EAHX,SAIC,eAtBOT,EADK,SAiCzB,SAACU,EAAA,EAAD,CACEC,SAAS,UACT1B,GAAI,CACF2B,UAAW,GAHf,SAKC,+CAnDC,SAACF,EAAA,EAAD,CACEC,SAAS,UACT1B,GAAI,CACF2B,UAAW,GAHf,SAKC,2CAkDN,EChBD,MArCA,WACE,IAAMvD,GAAWC,EAAAA,EAAAA,MACXuD,GAAYC,EAAAA,EAAAA,IAAYC,EAAAA,IACxBC,GAAQF,EAAAA,EAAAA,IAAYG,EAAAA,IAClBC,GAASC,EAAAA,EAAAA,MAATD,KAMR,OAJAE,EAAAA,EAAAA,YAAU,WACR/D,GAASgE,EAAAA,EAAAA,MACV,GAAE,CAAChE,KAGF,0BACG2D,EACChD,EAAAA,GAAAA,MAAY,uCAEZ,UAAC7B,EAAD,YACE,SAACmF,EAAA,EAAD,CAAY9C,QAAQ,KAAKH,UAAU,KAAKkD,MAAM,eAA9C,qCACwBL,EAAKlE,KAD7B,QAGA,SAACI,EAAD,KACA,SAACkE,EAAA,EAAD,CACE9C,QAAQ,KACR+C,MAAM,eACNrC,GAAG,OACHsC,MAAM,SAJR,SAKC,mBAGD,SAAC/C,EAAD,IACCoC,IAAa,yBAAK,uCACnB,SAAClB,EAAD,QAKT,C","sources":["components/Container/Container.styled.jsx","components/Container/Container.jsx","components/FormAddContact/FormAddContact.styled.jsx","components/FormAddContact/validation.js","components/FormAddContact/FormAddContact.jsx","components/Filter/Filter.jsx","components/ContactList/ContactList.styled.jsx","components/ContactList/ContactList.jsx","pages/ContactsPage.jsx"],"sourcesContent":["import styled from '@emotion/styled';\n\nexport const StyledContainer = styled.div`\n  margin: 0 auto;\n  padding: 1.25rem;\n  text-align: center;\n`;\n","import { StyledContainer } from './Container.styled';\n\nexport const Container = ({ children }) => {\n  return <StyledContainer>{children}</StyledContainer>;\n};\n","import styled from '@emotion/styled';\nimport { Form, Field, ErrorMessage } from 'formik';\n\nexport const StyledForm = styled(Form)`\n  padding: 1rem;\n  width: 30rem;\n  border: 1px solid black;\n  border-radius: 5px;\n  margin: 0 auto;\n  text-align: left;\n`;\n\nexport const FormContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 1rem;\n`;\n\nexport const Button = styled.button`\n  display: inline-block;\n  width: 10rem;\n  cursor: pointer;\n  border-radius: 0.25rem;\n  border: 0.0625rem solid gray;\n  :hover,\n  :focus {\n    color: rgb(255, 255, 255);\n    background-color: rgb(0, 0, 255);\n  }\n`;\n\nexport const Input = styled(Field)`\n  display: block;\n  padding: 0.5rem;\n  width: 20rem;\n`;\n\nexport const ErrMessage = styled(ErrorMessage)`\n  font-size: 14px;\n  color: red;\n`;\n\nexport const FormTitle = styled.h2`\n  margin-top: 0;\n  margin-bottom: 1rem;\n`;\n","import * as Yup from 'yup';\n\nconst numberPattern =\n  /^(\\+?\\d{0,4})?\\s?-?\\s?(\\(?\\d{3}\\)?)\\s?-?\\s?(\\(?\\d{3}\\)?)\\s?-?\\s?(\\(?\\d{4}\\)?)?$/;\n\nconst ContactSchema = Yup.object().shape({\n  name: Yup.string().required('Required field!'),\n  number: Yup.string()\n    .matches(numberPattern, 'Phone number is not valid')\n    .required('Required field!'),\n});\n\nexport { ContactSchema };\n","import { Formik } from 'formik';\nimport { useDispatch } from 'react-redux';\nimport { toast } from 'react-hot-toast';\nimport { Button } from '@mui/material';\n\nimport { FormTitle } from './FormAddContact.styled';\nimport {\n  StyledForm,\n  FormContainer,\n  Input,\n  ErrMessage,\n} from './FormAddContact.styled';\n\nimport { useContacts } from 'redux/hooks';\nimport { ContactSchema } from './validation';\nimport { addContact } from 'redux/contacts/operations';\n\nexport const FormAddContact = () => {\n  const dispatch = useDispatch();\n  const contacts = useContacts();\n\n  const handleSubmit = (values, actions) => {\n    if (\n      contacts.find(\n        ({ name }) => name.toLowerCase() === values.name.toLowerCase()\n      )\n    ) {\n      toast.error(\n        `Contact \"${values.name.toUpperCase()}\" is alredy in contacts`\n      );\n      return;\n    }\n    if (contacts.find(({ number }) => number === values.number)) {\n      toast.error(\n        `Contact with number\"${values.number}\" is alredy in contacts`\n      );\n      return;\n    }\n\n    dispatch(addContact(values));\n    actions.resetForm();\n  };\n\n  return (\n    <Formik\n      initialValues={{\n        name: '',\n        number: '',\n      }}\n      validationSchema={ContactSchema}\n      onSubmit={handleSubmit}\n    >\n      <StyledForm>\n        <FormTitle>Add contact</FormTitle>\n        <FormContainer>\n          <div>\n            <label>\n              Contact name\n              <Input type=\"text\" name=\"name\" required />\n              <ErrMessage name=\"name\" component=\"p\" />\n            </label>\n          </div>\n          <div>\n            <label>\n              Phone number\n              <Input\n                type=\"tel\"\n                name=\"number\"\n                title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n                required\n              />\n              <ErrMessage name=\"number\" component=\"p\" />\n            </label>\n          </div>\n          <Button variant=\"contained\" type=\"submit\">\n            Add contact\n          </Button>\n        </FormContainer>\n      </StyledForm>\n    </Formik>\n  );\n};\n","import { useDispatch } from 'react-redux';\nimport { TextField } from '@mui/material';\n\nimport { filterContacts } from 'redux/contacts/filterSlice';\nimport { useFilter, useVisibleContacts } from 'redux/hooks';\n\nexport const Filter = () => {\n  const dispatch = useDispatch();\n  const filter = useFilter();\n\n  const isInputDisabled = useVisibleContacts() ? false : true;\n\n  return (\n    <TextField\n      variant=\"standard\"\n      label=\"Enter name to filter...\"\n      type=\"text\"\n      size=\"small\"\n      sx={{ mt: 1, mb: 1 }}\n      value={filter}\n      disabled={isInputDisabled}\n      onChange={({ currentTarget: { value } }) => {\n        dispatch(filterContacts(value));\n      }}\n    />\n  );\n};\n","import styled from '@emotion/styled';\n\nexport const Contacts = styled.ul`\n  margin-top: 1.5rem;\n  display: flex;\n  flex-direction: column;\n  gap: 1rem;\n  text-align: left;\n`;\n\nexport const Contact = styled.li`\n  display: flex;\n  gap: 1rem;\n  align-items: center;\n`;\n\n","import { useDispatch } from 'react-redux';\nimport { deleteContact } from 'redux/contacts/operations';\nimport { Contact, Contacts } from './ContactList.styled';\nimport { Alert, Button, Container, Grid } from '@mui/material';\nimport { useVisibleContacts } from 'redux/hooks';\n\nexport const ContactList = () => {\n  const dispatch = useDispatch();\n  const visibleContacts = useVisibleContacts();\n\n  if (!visibleContacts)\n    return (\n      <Alert\n        severity=\"warning\"\n        sx={{\n          marginTop: 1,\n        }}\n      >\n        There are no contacts in adress book...\n      </Alert>\n    );\n\n  return visibleContacts.length > 0 ? (\n    <Container maxWidth=\"sm\">\n      <Contacts>\n        {visibleContacts.map(({ id, name, number }) => (\n          <Contact key={id}>\n            <Grid container spacing={3}>\n              <Grid item xs={4}>\n                <p>{name}</p>\n              </Grid>\n              <Grid item xs={4}>\n                <p>{number}</p>\n              </Grid>\n              <Grid item xs={2}>\n                <Button\n                  type=\"button\"\n                  variant=\"contained\"\n                  onClick={() => dispatch(deleteContact(id))}\n                >\n                  Delete\n                </Button>\n              </Grid>\n              <Grid item xs={2}>\n                <Button\n                  type=\"button\"\n                  variant=\"contained\"\n                  onClick={() => console.log('edit')}\n                >\n                  Edit\n                </Button>\n              </Grid>\n            </Grid>\n          </Contact>\n        ))}\n      </Contacts>\n    </Container>\n  ) : (\n    <Alert\n      severity=\"warning\"\n      sx={{\n        marginTop: 1,\n      }}\n    >\n      There are no contacts matching the filter\n    </Alert>\n  );\n};\n","import { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { toast } from 'react-hot-toast';\nimport { Typography } from '@mui/material';\n\nimport { fetchContacts } from 'redux/contacts/operations';\nimport { selectError, selectIsLoading } from 'redux/contacts/selectors';\nimport { useAuth } from 'redux/hooks';\n\nimport { Container } from 'components/Container/Container';\nimport { FormAddContact } from 'components/FormAddContact/FormAddContact';\nimport { Filter } from 'components/Filter/Filter';\nimport { ContactList } from 'components/ContactList/ContactList';\n\nfunction ContactsPage() {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(selectIsLoading);\n  const error = useSelector(selectError);\n  const { user } = useAuth();\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <main>\n      {error ? (\n        toast.error('Unable to load data from database!')\n      ) : (\n        <Container>\n          <Typography variant=\"h3\" component=\"h2\" color=\"primary.main\">\n            {`Contacts of user \"${user.name}\"`}\n          </Typography>\n          <FormAddContact />\n          <Typography\n            variant=\"h5\"\n            color=\"primary.main\"\n            mt=\"10px\"\n            align=\"center\"\n          >\n            Contacts list\n          </Typography>\n          <Filter />\n          {isLoading && <div>Loading contacts from database...</div>}\n          <ContactList />\n        </Container>\n      )}\n    </main>\n  );\n}\n\nexport default ContactsPage;\n"],"names":["StyledContainer","styled","Container","children","StyledForm","Form","FormContainer","Input","Field","ErrMessage","ErrorMessage","FormTitle","ContactSchema","Yup","shape","name","required","number","matches","FormAddContact","dispatch","useDispatch","contacts","useContacts","initialValues","validationSchema","onSubmit","values","actions","find","toLowerCase","toast","toUpperCase","addContact","resetForm","type","component","title","Button","variant","Filter","filter","useFilter","isInputDisabled","useVisibleContacts","TextField","label","size","sx","mt","mb","value","disabled","onChange","currentTarget","filterContacts","Contacts","Contact","ContactList","visibleContacts","length","maxWidth","map","id","Grid","container","spacing","item","xs","onClick","deleteContact","console","log","Alert","severity","marginTop","isLoading","useSelector","selectIsLoading","error","selectError","user","useAuth","useEffect","fetchContacts","Typography","color","align"],"sourceRoot":""}